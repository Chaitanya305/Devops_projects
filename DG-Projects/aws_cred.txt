D1g!talB@ck0ff!c

dataflow@digitalbackoffice.co.uk
snapshot@digitalbackoffice.co.uk
D0ck3rHub!

https://us-east-1.signin.aws/platform/login?workflowStateHandle=611ac8e9-4d32-4330-ad0d-6699f8540ba2


Anurag Jain
23:55
https://airflow.apache.org/docs/helm-chart/stable/production-guide.html
Anurag Jain
23:56
https://github.com/airflow-helm/charts

https://github.com/apache/airflow/discussions/26906


https://airflow.apache.org/docs/helm-chart/stable/index.html

https://docs.aws.amazon.com/eks/latest/userguide/managing-ebs-csi.html

------------------------------
aws eks update-kubeconfig --region us-east-1 --name dataflow
-----------------------------------------------------------------------------
Create airflow with cumminity chart.

airflow-cluster

helm repo add airflow-stable https://airflow-helm.github.io/charts
helm repo update
kubectl create ns airflow-cluster
helm install airflow airflow-stable/airflow --namespace airflow-cluster --version "8.8.0" --values ./values.yml

sudo apt install postgresql
psql -h <hostname> -U <username> -d <database_name>
-----------------------------------------

worker:- 8793

Create airflow with official helm chart


helm repo add apache-airflow https://airflow.apache.org
helm upgrade --install airflow apache-airflow/airflow --namespace airflow --create-namespace --values ./values2.yml


--------------------------------

helm upgrade --cleanup-on-fail --install notebook  jupyterhub/jupyterhub --namespace notebook --create-namespace 


docker build . -t superset-img

docker run -d -p 8088:8088 --env ADMIN_USERNAME=admin --env ADMIN_EMAIL=admin@superset.com --env ADMIN_PASSWORD=admin --name superset superset-img

docker exec -ti superset pip install pandas_gbq

docker exec -ti superset pip install shillelagh

https://superset.apache.org/docs/installation/configuring-superset/#:~:text=If%20you%20are%20running%20superset,your%20superset%20instance%20is%20running.

https://jupyterhub.readthedocs.io/en/stable/reference/spawners.html#spawners-reference

$ configurable-http-proxy --ip=127.0.0.1 --port=8000 --api-ip=127.0.0.1 --api-port=8001 --default-target=http://user-redirect/proxy/8088 --error-target=http://localhost:8081/hub/error





airflow-image
airflow-home --> airflow.cfg , webserver-configure.py and requirement.txt
apache airflow- latest one stable .--2.8 
py 3.8 

create py env for airflow 
install airflow 
set airflow home 
launch airflow standalone.


python3 -m venv <path>
source path/bin/activate 

--------------

nginx.ingress.kubernetes.io/rewrite-target: /$2
 path: /something(/|$)(.*)


------------------

get one elastic ip and it should be assign to elb once it get created through k8s

letsencrypt get certificate from here
-----------
to get NLB when creating NGINX-ingress controller

helm upgrade  my-release oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.1.3 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb"


--------
to set -fixed ip 

controller.service.annotations."service.beta.kubernetes.io/aws-load-balancer-eip-allocations: 3.223.111.151"

--------------------------

helm install my-release oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.1.3 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-eip-allocations"="eipalloc-06571868a6b33e8e4\,eipalloc-0bd5ed40d4e58c585" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-subnets"="sub-id"


-----------------------

helm install my-release oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.1.3 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-eip-allocations"="eipalloc-06681ae183676bd49\,eipalloc-0bd5ed40d4e58c585"

------------

kubectl create secret tls demo-dataflow-zone-tls --certificate "path/cert" --key "path/key"

---------------

helm install my-release oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.1.3 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-eip-allocations"="eipalloc-06571868a6b33e8e4\,eipalloc-0bd5ed40d4e58c585" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"="sg-00bf8a7803b641dc3" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-manage-backend-security-group-rules"="'true'"

-----------------------

https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes

-----------------

helm upgrade my-release oci://ghcr.io/nginxinc/charts/nginx-ingress --version 1.1.3 --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-type"="nlb" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-eip-allocations"="eipalloc-06571868a6b33e8e4\,eipalloc-0bd5ed40d4e58c585" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-security-groups"="sg-09640daddd0832ba3" --set controller.service.annotations."service\.beta\.kubernetes\.io/aws-load-balancer-manage-backend-security-group-rules"="'true'" --set controller.enableSnippets=true


------------

kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml
cd ..\certificate\
kubectl apply -f .\certissuer.yml
cd ..\ingress\
kubectl apply -f .\ingress.yml -n dataflow-studio
-----------------

/usr/local/share/jupyterhub/templates

docker.io/digitalbackoffice/dataflow-hub
chaitanya305/hub

------------

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: demo-ingress
  #namespace: dataflow-studio
  annotations:
    acme.cert-manager.io/http01-edit-in-place: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    kubernetes.io/ingress.class: "nginx"
    nginx.org/server-snippets: |
      /*location ~ /app {
        rewrite ^/app(.*)$ /user-redirect/proxy/8088/$1 permanent;
      }
      location ~ ^/(static|superset|sqllab|savedqueryview|druid|druiddatasourcemodelview|api|tabstateview)/ {
        rewrite ^/(static|superset|sqllab|savedqueryview|druid|druiddatasourcemodelview|api|tabstateview)(.*)$ /user-redirect/proxy/8088/$1$2 permanent;
      }*/
      location  ~ ^/(assets)/ {
        rewrite ^/(assets)(.*)$ /user-redirect/proxy/8000/$1$2 permanent;
      }
      location   /notebook {
        rewrite /notebook /user-redirect/lab permanent;
      }

spec:
  ingressClassName: nginx
  rules:
  - host: demo.dataflow.zone
    http:
      paths:
      #- path: /dataflow(/|$)(.*)
      #  pathType: Prefix
      #  backend:
      #    service:
      #      name: dataflow-service
      #      port:
      #        number: 5173
      - path: /
        pathType: Prefix
        backend:
          service:
            name: proxy-public
            port:
              number: 80
      #- path: /app
      #  pathType: Prefix
      #  backend:
      #    service:
      #       name: proxy-public
      #      port:
      #        number: 80
      #- path: /(static|superset|sqllab|savedqueryview|druid|druiddatasourcemodelview|api|tabstateview)/
      #  pathType: Prefix
      #  backend:
      #    service:
      #      name: proxy-public
      #      port:
      #        number: 80   
      
  tls:
  - secretName: demo-dataflow-zone-tls
    hosts:
      - "demo.dataflow.zone"            